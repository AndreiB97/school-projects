Pentru implementarea temei am avut nevoie de doua structuri:
	1. ram
	2. CPU

1. Structura de tip ram este folosita pentru stocarea intregii memorii ram intr-un vector pentru a putea fi accesata rapid si modificata usor. Ea contine doua campuri: un intreg pozitiv pentru adresa si o variabila de tip T pentru datele de la adresa respectiva. Pe langa aceasta structura am implementat inca trei functii:
	1.1 updateData
	1.2 getData
	1.3 printRam

1.1 Primeste ca parametri o adresa addr si o valoare data, apoi modifica valoarea de la adresa addr din ram in valoarea data.

1.2 Primeste ca parametru o adresa addr si returneaza valoarea de la acea adresa din ram.

1.3 Scrie continutul ramului in ram.out.

2. Structura CPU contine:
	2.1 Un vector de doua elemente de tip L1
	2.2 Un element de tip L2
	2.3 Functia de read
	2.4 Functia de write
	2.5 Functia de print

2.1 Vector de tip L1 reprezinta coreurile procesorului, iar structura de tip L1 contine:
	2.1.1 Un vector de 2048 elemente de tip set
	2.1.2 Functia de hashing pentru L1

2.1.1 Un element de tip set contine:
	2.1.1.1 Un vector de doua elemente de tip way
	2.1.1.2 Functia findFirst
	2.1.1.3 Functia findAddr
	2.1.1.4 Functia markDirty

2.1.1.1 Structura way este alcatuita din:
	2.1.1.1.1 Un intreg pozitiv pentru adresa
	2.1.1.1.2 O variabila de tip T pentru valoarea de la adresa respectiva
	2.1.1.1.3 O variabila booleana care spune daca acest element a fost ultimul adaugat in set
	2.1.1.1.4 O variabila booleana care spune daca valoarea de la aceasta adresa este dirty

2.1.1.2 Functia returneaza indexul unuia dintre way conform politicii de Least Recently Added.
 
2.1.1.3 Functia cauta o adresa in set si returneaza indexul wayului in care a fost gasita. Daca adresa nu este gasita in set atunci returneaza un apel catre functia findFirst.

2.1.1.4 Functia cauta o adresa in set si o marcheaza dirty daca o gaseste.

2.1.2 Functia primeste ca parametru un intreg pozitiv si returneaza un intreg pozitiv format din bitii 2-12 ai parametrului.

2.2 Structura de tip L2 contine:
	2.2.1 Un vector de 8192 elemente de tip set
	2.2.1 Functia de hashing pentru L2

2.2.1 Functia primeste ca parametru un intreg pozitiv si returneaza un intreg pozitiv format din bitii 2-14 ai parametrului.

2.3 Functia primeste ca parametri un nucleu si o adresa. Cauta adresa in L1 al acelui nuclue, daca o gaseste se opreste, daca nu o cauta in L2. Daca o gaseste in L2 o copiaza in L1, daca nu o gaseste in L2 o cauta in ram si o copiaza in L1 si in L2.

2.4 Functia primeste ca parametri un nucleu, o adresa si o valoarea. Cauta adresa in L1 al acelui nucleu, daca o gaseste ii actualizeaza valoarea si o marcheaza ca find dirty in celalt nucleu, daca nu o gaseste in L1 o cauta in L2. Daca o gaseste in L2 o copiaza in L1 si o actualizeaza si in L1 si in L2 si o marcheaza ca find dirty in celalalt nucleu, daca nu o gaseste in L2 o cauta in ram si o copiaza in L1 si L2, apoi o actualizeaza in L1 si L2 si o marcheaza ca find dirty in celalalt nucleu.

2.5 Functia scrie continutul memoriei cache in cache.out si apeleaza functia printRam.